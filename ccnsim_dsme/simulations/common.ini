network = ccnsim_dsme_network
sim-time-limit = 150000s
simtime-scale=-8
repeat = 1

# Speed up
**.radioMedium.rangeFilter = "interferenceRange"
**.node[*].wlan[*].radio.*.result-recording-modes = -histogram,-vector

# Mobility
**.numHosts = ${numhosts = $numRfd + 1}
**.node[*].mobility.typename = "StaticConcentricMobility"

#### PK
**.node_type = "ccnsim_dsme.ccnsim_dsme_node"
**.n = ${numhosts}

### MAC configuration
**.node[*].wlan[*].typename = "DSMELoRaNic"
**.radioMedium.typename = "ccnsim_dsme.LoRaDSMEMedium"
**.node[0].wlan[*].mac.isPANCoordinator = true

# Use GTS for RX and/or TX. Only end nodes allocate cells if gtsXx is enabled.
# Therefore gtsTx in the gateway is only used for sending withing a CFP slot
# and gtsRx is ignored here.
# Because end nodes allocate slots, If the gateway send with gtsTx, the nodes MUST enable gtsRx.

# Set ExpirationTime to 255 slots in order to avoid expiration.
**.node[*].wlan[*].mac.macDSMEGTSExpirationTime = 255

**.node[*].wlan[*].mac.macCapReduction = false

# This doesn't seems to be standard DSME. Disable
**.node[*].wlan[*].mac.sendMultiplePacketsPerGTS = false

**.node[*].wlan[*].mac.superframeOrder = 3
**.node[*].wlan[*].mac.multiSuperframeOrder = 5
**.node[*].wlan[*].mac.beaconOrder = 7
**.node[*].wlan[*].mac.macResponseWaitTime = 32
**.node[*].wlan[*].mac.macMinBE = 3
**.node[*].wlan[*].mac.macMaxBE = 5
**.node[*].wlan[*].mac.macMaxCSMABackoffs = 4
**.node[*].wlan[*].mac.macMaxFrameRetries = 3
**.node[*].wlan[*].mac.minBroadcastLQI = 150
**.node[*].wlan[*].mac.minCoordinatorLQI = 150
**.node[*].wlan[*].mac.minCoordinatorLQI = 150
**.node[*].wlan[*].mac.CAPAckRequest = true
## Indicates in how many (random) repositories the seed copy of a given content is replicated.
**.replicas = 1

## Client window parameters (Client with transmission window)
**.defWinSize = 1
**.maxWinSize = 10
**.dropProb = 0.01

#####################################################################
###################  Content Distribution ###########################
#####################################################################
## Average size of a content (# chunks). Content size is exponentially distributed.
**.file_size =  1
## Shaping factor of the Zipf's distribution
**.alpha = 1
## Plateau of the MZipf distribution
**.q = 0
## Percentile after which the catalog is aggregated (e.g., 90-th percentile = 0.9. Not useful)
**.perc_aggr = 1.0
## Percentile after which 'per file' statistics are not gathered. 
**.stat_aggr = 0.5
## Content distribution type: IRM, ShotNoiseContentDistribution (Still alpha version; please comment this line if using IRM)
**.content_distribution_type = "ccnsim_dsme.content_distribution_ext"

#####################################################################
##########################  Forwarding ##############################
#####################################################################
## Strategy layer (interest forwarding): 
## - spr: Shortest Path Strategy. Interest packets are sent toward the closest repository (in terms of #hops count)
## - nrr1: Nearest Replica Routing (one phase)
## - nrr:  Nearest Replica Routing (two phases)
## - random_repository: Interest packets are sent toward one random repository (among those who store the requested content)
## - parallel_repository: Interest packets are sent toward all the repositories which store the requested content.
**.FS = "spr"
**.TTL2 = 1000
**.TTL1= 1000
**.routing_file = ""

#####################################################################
##########################  Caching  ################################
#####################################################################
## Mets-Caching algorithms: fixP, lce , no_cache , lcd, btw, prob_cache, two_lru, two_ttl (only for TTL-based scenario)
**.DS = "lce"
## Replacement strategies: {lru,lfu,fifo,two,random}_cache
**.RS = "lru_cache"
## Cache size (#chunks)
**.C = 100
## Name cache size (#content IDs). Used only with two_lru meta-caching.
**.NC = 0
## Name of the file containing Tc values (only for TTL-based scenario)
**.tc_file = "./Tc_Values/tc_single_cache_NumCl_1_NumRep_1_FS_spr_MC_lce_M_1e6_R_1e4_C_1e3_Lam_20.0.txt"
## Name of the file containing Tc values of the Name Cache (in case of 2-LRU, only for TTL-based scenario)
**.tc_name_file = "./tc_name_single_cache"

#####################################################################
########################  Statistics ################################
#####################################################################
## Time window for the stability checking
**.window = 100
## Sampling time 
**.ts = 20
##Ex: in this case every 2000 secs a stabilization checks is executed. Every 20 sec a sample is collected. 
##    Thus, the stabilization is checked every 100/20=5 samples.

## Proportion of nodes for which FULL and STABILITY check is executed.
## Ex: partial_n = 0.5 --> Statistics are collected only after 50% of nodes have been declared stable (after having filled their cached) 
## Ex: partial_n = 1.0 --> Statistics are collected only after ALL nodes have been declared stable (after having filled their cached) 
**.partial_n = 0.75

## A cache is considered stable if the last N samples show variance smaller than this threshold
**.variance_threshold = 0.0001

## A cache is considered stable if the last N samples show coefficient of variation (CV) smaller than this threshold (NEW)
**.cvThr = 0.05

## A cache is considered stable if the last N samples show coefficient of variation (CV) smaller than this threshold (NEW)
**.consThr = 0.1


##Time of simulation after the stabilization
**.steady = 50000

##Start Mode (i.e., 'hot' or 'cold' start, meaning full/empty caches)
**.start_mode = "cold"

##Fill Mode, i.e., 'naive' or 'model' filling. It is used in case a "hot" start mode has been selected
## naive = caches are filled with the most popular contents;
## model = caches are filled according to the result of the model solver [2]
**.fill_mode = "naive"

##Only model: flag indicating if the simulation stops after the execution of the model solver; it is used only with
## the combination "hot+model". E.g., onlyModel = false means that the simulations starts after that caches are filled
## with the top 'C' popular contents (where C = cache dim) calculated by the model solver for each node. Otherwise, the
## simulations ends after the execution of the model solver. 
**.onlyModel = true

## Downsizing factor: in normal simulation down = 1. In TTL-based scaled scenario, down > 1 (i.e., newCatalog = Catalog / down)
**.downsize = 1

**.interest_aggregation = false

#####################################################################
###############  Strategy Layer (link failure) ######################
#####################################################################
## Scheduled time for the failure
**.fail_time = 50000
**.fail_duration = 200
**.fail_transient = 5000
**.fail_scenario = false

#####################################################################
###############  Core Layer (Link Load Evaluation) ##################
#####################################################################
**.llEval = false
**.maxInterval = 10.0
# Datarate [1Mbps] (so far fixed and equal for all links) 
**.datarate = 1000000


#####################################################################
########################  Shot Noise Model ##########################
#####################################################################

# Configuration File for the Shot Noise model [1] 
**.shot_noise_file = "ShotNoiseScenario.txt" 

# Multiplicative factor for the Toff (e.g., Toff = k * Ton)
**.toff_mult_factor = 9

# Number of requests that users want to simulate
**.num_tot_req= 1e9

**.node[*].core_layer.timeToNext = ${timeToNext = 30, 60, 120, 240, 480, 900, 1800, 3600}

## TODO!! Client WM time!

output-vector-file = ${resultdir}/${datetime}_${runid}.vec
output-scalar-file = ${resultdir}/${datetime}_${runid}.sca
eventlog-file = ${resultdir}/${datetime}_${runid}.elog
snapshot-file = ${resultdir}/${datetime}_${runid}.sna
cmdenv-output-file = ${resultdir}/${datetime}_${runid}.out

**.node[*].face_dsme.indicationCFP = false
**.node[*].face_dsme.interestCFP = false
**.node[*].face_dsme.dataCFP = false
**.node[*].face_dsme.pushCFP = false

**.client_path_prefix = "ccnsim_dsme."

## Timer indicating how often the state of a content download is checked.
**.check_time = 2

**.node[*].wlan[*].mac.gtsTx = false
**.node[*].wlan[*].mac.gtsRx = false

## The RTT is used to trigger retransmissions (usually, RTT >> N_D*d, where N_D is the network diameter, and d is the average delay on a link)
**.RTT = 125.82912
